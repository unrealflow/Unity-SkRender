// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> _DenoiseResult;
Texture2D _PreResult;
Texture2D _Position;
Texture2D _Normal;
Texture2D _Albedo;
Texture2D _RayResult;

Texture2D _PrePosition;
Texture2D _PreNormal;

SAMPLER(s_linear_clamp_sampler);

//值越大表示差异越大
float ev(float3 a, float3 b)
{
    return exp(length(a - b)) - 1;
}
float ev(float4 a, float4 b)
{
    return exp(length(a - b)) - 1;
}
//值越小表示差异越大
float comparePre(in float3 fragPos, in float3 normal, in float2 preUV,float evSize)
{

    float3 preP = _PrePosition.SampleLevel(s_linear_clamp_sampler, preUV,0.0).rgb;
    float3 preN = _PreNormal.SampleLevel(s_linear_clamp_sampler, preUV,0.0).rgb;
    float factor = ev(fragPos, preP)*2.0 + ev(normal, preN)*0.2;
    // return clamp(1.05 / exp(factor * evSize)-0.05,0.0,1.0);
    return 1.0 / exp(factor * evSize);
}
float compareCur(in float3 fragPos, in float3 normal, in float2 inUV,float evSize)
{

    float3 preP = _Position.SampleLevel(s_linear_clamp_sampler, inUV,0.0).rgb;
    float3 preN = _Normal.SampleLevel(s_linear_clamp_sampler, inUV,0.0).rgb;
    float factor = ev(fragPos, preP)*2.0 + ev(normal, preN)*0.2;
    // return clamp(1.05 / exp(factor * evSize)-0.05,0.0,1.0);
    return 1.0 / exp(factor * evSize);
}
float compareCur(in float3 fragPos, in float3 normal, in int2 id,float evSize)
{

    float3 preP = _Position[id].rgb;
    float3 preN = _Normal[id].rgb;
    float factor = ev(fragPos, preP)*2.0 + ev(normal, preN)*0.2;
    // return clamp(1.05 / exp(factor * evSize)-0.05,0.0,1.0);
    return 1.0 / exp(factor * evSize);
}

float GetWeight(float _Range,uint2 ij)
{
    float2 vf = float2(ij);
    // color=color*color;
    float l0 = length(vf);
    l0 = smoothstep(_Range*1.5,0.0, l0);
    return l0;
}
#define USE_SVGF 1.0

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_GroupID)
{
    float frameIndex=max((float)_FrameIndex-3.0,1.0);
#ifdef USE_SVGF
    // TODO: insert actual code here!
    float4 result = _RayResult[id.xy];
    float4 curPos=_Position[id.xy];
    float4 curNormal=_Normal[id.xy];
    if(curNormal.a>0.1)
    {
        float f0=1.0 / frameIndex;
        _DenoiseResult[id.xy]=lerp(_DenoiseResult[id.xy],result,f0);
        return;
    }

    float2 inUV=(float2(id.xy)+0.5)/float2(_RTSize.xy);
    float2 preUV=inUV;
    if(_FrameIndex<3)
    {
        float4 prePos=mul(_PreProj,mul(_PreView,float4(curPos.xyz,1.0)));
        prePos/=prePos.w;
        preUV=prePos.xy*0.5+0.5;
    }
  
    float4 preResult=_PreResult.SampleLevel(s_linear_clamp_sampler,preUV,0.0);
    // float4 preResult=_DenoiseResult[id.xy];

    float f0=comparePre(curPos.xyz,curNormal.xyz,inUV,3.0);
    float factor = 1.0-1.0 / frameIndex;
    float minimum=0.95*f0;
    float maximum=0.999;
    factor=minimum+(maximum-minimum)*factor*factor;
    factor=1.0-factor;
    int Range=int(3.0+factor*4.0);
    float _Range=float(Range);
    float3 blurColor=0.0;
    float totalWeight=0.0;
    for(int i=-Range;i<=Range;i++)
    {
        for(int j=-Range;j<=Range;j++)
        {
            int2 bias = int2(i,j);
            int2 t_id=id.xy+bias;
            float weight=GetWeight(_Range,bias)*compareCur(curPos.xyz,curNormal.xyz,t_id,1.0);
            blurColor+=_RayResult[t_id].xyz*weight;
            totalWeight+=weight;
        }
    }
    result.xyz=blurColor/totalWeight;
    // float4 preResult=tex2D(_DenoiseResult,preUV);
    
    result= lerp(preResult,result,factor);
    _DenoiseResult[id.xy] = clamp(result,preResult-factor,preResult+factor);
    // _DenoiseResult[id.xy] = result;
#else 
    float4 result = _RayResult[id.xy];
    float f0=1.0 / frameIndex;
     _DenoiseResult[id.xy]=lerp(_DenoiseResult[id.xy],result,f0);
#endif
}
